{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bited","text":"<p>A bitmap font editor.</p> <p> Download</p> <p></p> <p>bited (pronounced \"bit\" + \"ed\") is an open-source designer and editor for bitmap/pixel fonts -- specifically monochrome Unicode BDF fonts. It features a coterie of small yet impactful quality-of-life goodies that aim to make the creative process smooth and enjoyable for the type designer. Some of these features include:</p> <ul> <li>Simple, composable tools for drawing and manipulating glyphs.</li> <li>Font preview with text presets for testing fonts.</li> <li>Custom UI font made with bited.</li> <li>Light and dark mode.</li> </ul> <p>Warning</p> <p>bited is still under heavy development; any bugs should be reported to Issues.</p>"},{"location":"credits/","title":"Credits","text":"<p>bited is proudly built with:</p> <ul> <li>Godot</li> <li>godot-rust</li> <li>godot-sqlite</li> <li>UnifontEX</li> <li>GNU Unifont</li> <li>Nerd Fonts</li> <li>MkDocs Material</li> <li>MkDocs Awesome Pages Plugin</li> <li>MkDocs GLightbox</li> </ul> <p>Development of bited would not have been possible without the following inspirations and resources:</p> Software <ul> <li>Bits'n'Picas</li> <li>gbdfed</li> <li>FontForge</li> <li>Pixelorama</li> <li>FreeType BDF drivers</li> <li>FlakeHub</li> </ul> Font Testers <ul> <li>Cyreal Font Testing Pages</li> <li>Greek Pangrams</li> <li>SMG Test Text</li> <li>Markus Kuhn UTF-8 Demo</li> </ul> Specs <ul> <li>BDF 2.1</li> <li>BDF 2.2</li> <li>XLFD</li> </ul> Code Pages <ul> <li>Unicode Consortium UCMs</li> <li>KreativeKorp Encodings References</li> </ul>"},{"location":"why/","title":"Why bited?","text":"<p>I love bitmap fonts. Whether it's programming in my terminal of choice or playing games with pixel art styles, I derive an odd enjoyment from seeing perfectly crisp pixels on my screen. Bitmap fonts are visually sharp with a tinge of retro; they're astonishingly readable at small sizes and are great for fitting more text into small screens.</p> <p></p> <p>When I first began using bitmap fonts for programming, I periodically switched between fonts made by others. But as someone who is obsessed with customization, I found myself yearning for a font that was more... bespoke. With my bitmap font editor of choice -- Bits'n'Picas -- I set to work creating fonts tailored specifically to my personal taste.</p> <p></p> <p>eldur, a stylistically unique font that is perhaps too tiny for practical use.</p> <p></p> <p>kirsch, another stylistically unique font I now use as my programming font of choice.</p> <p>As I became more familiar with designing bitmap fonts, I began wishing for features that weren't present in Bits'n'Picas. I tried FontForge, but its unintuitive and clunky UI/UX made for an uncomfortable time. Other editors, for one reason or another, didn't fit my desired workflow.</p> <p>And so I decided to build my own.</p> <p></p>"},{"location":"download/","title":"Download","text":"<p> Github Releases</p>"},{"location":"download/#build-from-source","title":"Build from Source","text":"<p>Requirements:</p> <ul> <li>Godot 4.3</li> </ul> <p>Clone the repo, open via Godot, and modify/export/etc.</p> <p>Note</p> <p>If you wish to run bited in debug mode, you will need to <code>cargo build</code> the Rust library, located in <code>rust/</code>.</p>"},{"location":"manual/","title":"User Manual","text":"<p>This manual will guide you through the basics of using bited. By the end of it, you will hopefully be well on your way to making your very own fonts!</p> <p>Before You Continue</p> <p>Make sure you've downloaded bited.</p>"},{"location":"manual/font-anatomy/","title":"Anatomy of a Font","text":"<p>Tip</p> <p>This section might be a bit dense, especially for newcomers. Feel free to just skim through on your first read, and then -- as you progress through subsequent sections -- periodically refer back here. The information here is important, but can also be intuitively learned through the hands-on process of making a font.</p> <p>In bited, a font is a collection of glyphs which generally share some sort of style. Creating a font is essentially just creating a bunch of glyphs!</p> <p></p> <p>A glyph (sometimes used interchangeably with \"character\"/\"char\") is a visual representation of a symbol -- e.g. letters, numbers, punctuation. In bited, where we'll be working with Unicode bitmap fonts, glyphs represent Unicode symbols and are constructed from pixels.</p>"},{"location":"manual/font-anatomy/#metrics","title":"Metrics","text":"<p>The glyph view inside the Editor exposes several metrics as colored grid lines:</p> <p></p> Horizontal Metrics (from left to right) Baseline <p>The line upon which the other horizontal metrics are measured.</p> DWidth <p>Typically known as advance width. A glyph-specific metric for the amount of horizontal space this character occupies.</p> Vertical Metrics (from top to bottom) Ascent <p>The topmost edge of the font. Pixels above the ascent will bleed upwards into the previous line.</p> Cap Height <p>The height above the baseline of a typical uppercase letter in your font.</p> <p>This metric is purely for designer use; it isn't used in any font-related calculations.</p> X-Height <p>The height above the baseline of a lowercase \"x\" in your font.</p> <p>This metric is purely for designer use; it isn't used in any font-related calculations.</p> Baseline <p>The line upon which the other vertical metrics are measured.</p> Descent <p>The bottommost edge of the font. Pixels below the descent will bleed downwards into the next line.</p> <p>Typesetting glyphs relies on boxes formed from each glyph's ascent, descent, horizontal baseline, and dwidth. In other words:</p> <ul> <li>Given two consecutive glyphs, the next glyph's horizontal baseline and the   previous glyph's dwidth will be equal.</li> <li>Given two consecutive lines of glyphs, the next line's ascent and the   previous line's descent will be equal.</li> </ul> <p>When choosing your bitmap font's metrics, you should make sure to reserve enough space so that glyphs don't crowd each other out.</p> <p>Here are some other useful things to know about these metrics:</p> <ul> <li>Font size can be determined by adding the ascent and descent.</li> <li>Diacritics will typically go between the ascent and cap height or between the   descent and vertical baseline. If you're planning on adding glyphs with   diacritics, make sure to also reserve space for these.</li> <li>A glyph may extend beyond its box. This is especially common in small   monospace fonts, where the designer might opt to trade spacing for visual   clarity. Such a tradeoff is more acceptable for symbols that are more likely   to appear on their own.</li> </ul>"},{"location":"manual/font-anatomy/#sample-glyphs","title":"Sample Glyphs","text":"<p>The tail in this \"y\" extends below the baseline, while the body remains above the baseline.</p> <p></p> <p>The diaresis in this \"\u00c4\" sit above the letter, between the ascent and cap height.</p> <p></p> <p>The cedilla in this \"\u0163\" sits below the letter, between the descent and baseline.</p> <p></p> <p>This \"\u2665\" extends a bit beyond its dwidth.</p>"},{"location":"manual/main/","title":"Main Screen","text":"<p>From the Start Menu, let's load the <code>bited</code> font we imported previously.</p> Hint <p>To load existing fonts from the Start Menu, press the \"load\" button (2).</p> <p></p> <p>In the table with a bunch of glyphs, find the \"b\" glyph and double-click it.</p> <p></p> <p>The Main Screen consists of several panels (from left to right, top to bottom):</p> Editor <p>A place to draw and manipulate individual glyphs. Features visual markers representing font metrics.</p> Table <p>A view of glyphs in the currently selected Tree. Used to select and manipulate multiple glyphs, or send individual glyphs to the Editor.</p> Tree <p>A nested list of character sets (\"charsets\") and encodings. You can switch between entries here to find or focus on groups of glyphs that you wish to edit.</p> Navbar <p>A bar at the bottom of the Main Screen. Contains buttons for font-wide operations (e.g. saving and loading) and settings.</p>"},{"location":"manual/save/","title":"Save System","text":""},{"location":"manual/start/","title":"Start Menu","text":"<p>When you first open bited, you'll see this Start Menu:</p> <p></p> <p>Note</p> <p>By default, bited uses your system's dark/light mode to determine its own theme. You can change this via <code>DISPLAY &gt; theme</code> in the Settings Menu.</p> <p>Let's see what each of these buttons do.</p>"},{"location":"manual/start/#new","title":"New","text":"<p>Let's see how to create a new font from scratch. Pressing \"new\" (or its keybind 1) will bring up the following dialog:</p> <p></p> font id <p>A unique \"file name\" for your font. May only contain <code>a-z</code>, <code>0-9</code>, and <code>_</code>. In the simplest cases, this may just be the name of your font. If you're making multiple variations on one font family, the ID may also contain other pieces of info to distinguish it (e.g. <code>helvetica_bold</code> vs. <code>helvetica_regular</code>).</p> <p>For now, let's set this to <code>unicorn</code>. If you don't like this name (highly unlikely), you can always change it later.</p> preset <p>Some optional starting templates for your font's metrics: height/width, ascent/descent, cap-height, x-height.</p> <p>Feel free to pick one or leave empty.</p> <p>Once you've entered in a <code>font id</code>, a \"start\" button should appear. Let's press it and see what happens.</p> <p>Tip</p> <p>For all dialogs, you can trigger \"OK\"-type buttons with Ctrl+Enter, and \"cancel\"-type buttons with Esc.</p> <p></p> <p>We'll revisit this Main Screen later. For now, have a look at the navbar at bottom of the window. There should be a centered row of buttons. Click the button with a house (or press Ctrl+H) to go back to the Start Menu.</p>"},{"location":"manual/start/#load","title":"Load","text":"<p>Let's see how to load existing fonts from the font database. Pressing \"load\" (2) will bring up the following dialog:</p> <p></p> <p>Fonts you create or add will appear here, and can be loaded with the dialog's \"load\" button or by double-clicking the entry. You can also delete or rename fonts from this dialog.</p> <p>Feel free to explore around; just return to the Start Menu when you're done.</p>"},{"location":"manual/start/#import","title":"Import","text":"<p>Before You Continue</p> <p>Download the BDF for bited's UI font.</p> <p>Let's see how to import BDFs into bited. Pressing \"import\" (3) will bring up a file dialog. Locate the previously downloaded BDF and open it. After bited finishes parsing the BDF, you should see the following dialog:</p> <p></p> font id <p>Let's set this to <code>bited</code>.</p> default width <p>As the name suggests, a font-wide default glyph width. bited will attempt to automatically derive this when parsing the BDF; otherwise, this field will default to 0. This can be changed later.</p> <p>For now, let's leave this at 6.</p> <p>When you're ready, press \"import\" and you'll see the Main Screen once more:</p> <p></p> <p>We're now ready to move onto the next section.</p> <p>Tip</p> <p>Downloading, importing, and inspecting BDFs in bited is a great way to learn not only about how bited works, but also about the many conventions and choices that bitmap font designers have made.</p> <p>There exist many wonderful sources of BDFs just waiting to be found. Here is one such repo for these fonts.</p> <p>Now that you've imported the bited font, you can also use it as a reference font as you go through this manual!</p>"},{"location":"manual/make/","title":"Making a Font","text":"<p>In this section, we'll be editing the blank <code>unicorn</code> font we created all the way back in the \"Start Menu\" section.</p>"},{"location":"manual/make/adhesion/","title":"ADHESION","text":"<p>When making fonts from scratch, it's pretty useful to have a starter word for feeling out the letterforms and defining a style. We'll use \"adhesion\" as our starter word.</p>"},{"location":"manual/make/adhesion/#pen-tool","title":"Pen Tool","text":"<p>Double-click the cell for \"a\" to define it. The tool should be set to pen with default color mode (B+Q). Draw the following glyph:</p> <p></p> <p>Tip</p> <p>The pen tool's default color mode is the same as first-cell mode (T). In this mode, the first pixel's color is inverted; as long as the pen is held down, that color persists when dragged. This allows you to both draw and erase without having to switch modes.</p> <p>If you wish to only draw or erase, you can press W or E respectively to change the mode.</p>"},{"location":"manual/make/adhesion/#copypaste","title":"Copy/Paste","text":"<p>This \"a\" we've drawn could easily become a \"d\" with a bit of tweaking. With the \"a\" cell still selected in the table, copy it (Ctrl+C). Then single-click the \"d\" cell and paste (Ctrl+V).</p> <p></p> <p>Clicking the \"d\" cell again will send it to the Editor. This will highlight the \"d\" cell in purple to indicate it is being edited.</p> <p>Here's the \"d\" glyph we'll draw:</p> <p></p>"},{"location":"manual/make/adhesion/#transforms","title":"Transforms","text":"<p>For \"h\", we can start by copying \"d\" and paste it into the \"h\" cell. We can then flip horizontally (Shift+H) and draw the following:</p> <p></p> <p>Note</p> <p>The glyphs of our <code>unicorn</code> font so far have spacing on both sides, where flips are symmetrical. However, if you're working with glyphs with spacing on only one side, then you may need to translate the glyph left or right (Shift+Left / Shift+Right) after flipping.</p> <p>The glyphs for \"e\" and \"s\" should be pretty straightforward to draw:</p> <p></p> <p></p>"},{"location":"manual/make/adhesion/#dwidth","title":"DWidth","text":"<p>So far, all of our glyphs have had the same default dwidth, which means that -- up until now -- the font has been monospace. Monospace fonts are useful primarily in data/programming contexts like terminals, which typically expect consistent glyph widths. Most bitmap fonts tend to cater to these niches, and are typically monospace as a result.</p> <p>However, bited also supports proportional fonts with variable dwidths. These can be more flexible design-wise than monospace fonts. Let's make <code>unicorn</code> variable!</p> <p>While editing, you may have noticed these controls above the grid:</p> <p></p> <p>bited features two dwidth modes that can be toggled by pressing the <code>W?</code> button:</p> offset (indicated by <code>o:</code>) <p>The given input is treated as an offset of the default (font-wide) dwidth. Glyphs in offset mode will recalculate their dwidths when the default dwidth changes.</p> <pre><code>glyph_dwidth = font_dwidth + offset\n</code></pre> <p>By default, new glyphs are set to offset by 0.</p> dwidth (indicated by <code>w:</code>) <p>The given input is treated as the glyph's dwidth. Unlike in offset mode, glyphs in dwidth mode will not change their dwidths when the default dwidth changes.</p> <p>Since \"i\" is a thinner letterform, we'll use an offset of -2:</p> <p></p> <p>The glyphs for \"o\" and \"n\" will also be pretty straightforward:</p> <p></p> <p></p>"},{"location":"manual/make/fin-lower/","title":"Finishing Lowercase","text":"<p>Here are the rest of the lowercase letters:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"manual/make/first/","title":"The First Glyph","text":"<p>Using the Tree, navigate to <code>Windows Glyph List 4</code> and double-click on the first cell (should be the space character) in the Table.</p> <p></p> <p>Congratulations! Your font now has a glyph. We'll leave this one blank since it represents spaces.</p>"},{"location":"manual/make/hamburgefontsiv/","title":"HAMBURGEFONTSIV","text":"<p>At this point, you have all the tools you need to finish the rest of the letterforms. The next word we'll target is \"hamburgefontsiv\" (weird word, I know). We'll take cues from our existing glyphs to make sure the styles stay consistent.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>You can preview the letters you've drawn so far using the \"hamburgefontsiv\" preset.</p> <p></p>"},{"location":"manual/make/next/","title":"What's Next?","text":"<p>It is at this point that the design of <code>unicorn</code> is entirely in your hands; you are free to add or modify glyphs to your heart's content. Here is a recommended \"roadmap\" for expanding the font:</p> <ul> <li>Uppercase letters</li> <li>ASCII (in Windows Glyph List 4, this encompasses glyphs up to <code>~</code>)</li> <li>ISO-8859-1 (in Windows Glyph List 4, this encompasses glyphs up to \"\u00ff\")</li> <li>Windows Glyph List 4</li> <li>And beyond...</li> </ul> <p>For reference, here's  my version of unicorn. It covers all of ISO-8859-1 and includes some extra symbols from Windows Glyph List 4 to cover common punctuation and symbols.</p> <p></p>"},{"location":"manual/make/preview/","title":"Preview","text":"<p>We now have a whole word's worth of glyphs drawn out, but how do we see these glyphs in action?</p> <p>In the Navbar, press the \"preview font\" button (Ctrl+P).</p> <p></p> <p>Type \"adhesion\" into the input, and you should see the fruits of your labor thus far!</p> <p></p> <p>Tip</p> <p>Preview comes with several text presets that may come in handy as you continue designing your font and adding more glyphs.</p>"},{"location":"manual/make/settings/","title":"Settings","text":"<p>After opening up <code>unicorn</code> and getting to the Main Screen, the first thing we'll do is open the Settings Menu (Ctrl+,). Verify that it's on the FONTS tab.</p> <p></p> <p>Tip</p> <p>Hover over each settings field's label to get more information about that field!</p> foundry name <p>By default, this is <code>bited</code>. Feel free to change this to something more personalized if you wish.</p> family name <p>By default, this is <code>new font</code>. Let's change this to <code>unicorn</code>.</p> <p>Note</p> <p>If you didn't choose a preset when creating the font, the following metrics fields will be <code>0</code>.</p> Metrics <p>Let's set:</p> <ul> <li>Default dimensions to width <code>7</code> and height <code>17</code>.</li> <li>Descent to <code>4</code> (ascent will automatically update accordingly).</li> <li>Cap height to <code>9</code>.</li> <li>X-height to <code>5</code>.</li> </ul> <p>Once you've finished changing the settings, save &amp; close (Ctrl+Enter) to go back to the Main Screen.</p>"},{"location":"manual/make/tips/","title":"Tips &amp; Tricks","text":"<p>Here is an assortment of design tips that I've learned and discovered over the course of my bitmap font journey, which may help you on your own journey.</p>"},{"location":"manual/make/tips/#tradeoffs-between-different-font-characteristics","title":"Tradeoffs between different font characteristics","text":"<p>The decisions you make when beginning to design your font play a large part in determining how your font eventually behaves, as well as the kinds of compromises you'll eventually have to make as you continue designing that font.</p>"},{"location":"manual/make/tips/#proportional-vs-monospaced","title":"Proportional vs. Monospaced","text":"<p>Source: nypl.org</p> <p>Proportional fonts are suitable for a variety of text use cases. The immediate benefit of making your font proportional is that you can fit the width to the glyph, as opposed to the glyph to the width. For example, you can easily make \"m\" wider than \"x\", and \"x\" wider than \"i\". This grants you more freedom in design choices, and makes it far easier to expand your font's Unicode support without having to compromise compactness.</p> <p></p> <p>Source: htop.dev</p> <p>Monospaced fonts tend to be more niche than proportional fonts, and are primarily used in data-heavy contexts where having a fixed glyph width is important. Terminal emulators, for example, rely on the fixed width to properly display tabular data and render more complex UI elements. The design choices you can make with a monospaced font are inherently limited by its width constraint; going back to the previous example, you'd have to make \"m\", \"x\", and \"i\" the same width. A significant part of your design process will involve balancing aesthetics and legibility through compromises in compactness and spacing.</p> <p>The choice between proportional and monospaced is not entirely black-and-white, however. A proportional font may have monospaced digits for cleaner numerical formatting. Conversely, a monospaced font may have proportional widths in its less-used glyphs for the sake of legibility.</p>"},{"location":"manual/make/tips/#metrics","title":"Metrics","text":""}]}